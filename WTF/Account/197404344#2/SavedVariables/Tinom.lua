
TinomDB = {
	["chatStatDB"] = {
	},
	["Options"] = {
	},
	["accountDB"] = {
	},
	["playerDB"] = {
	},
	["filterDB"] = {
		["whiteListKeyword"] = {
		},
		["sensitiveKeyword"] = {
		},
		["replaceNameMsg"] = {
		},
		["blackList"] = {
		},
		["autoBlackList"] = {
		},
		["replaceKeyword"] = {
			["%?%?+"] = "?",
			["%++"] = "+",
			["%b{}"] = "_",
			["~~?"] = "~",
			["？"] = "?",
			["。"] = ".",
			["··?"] = ".",
			["，"] = ",",
			["MM?"] = "M",
		},
		["sensitiveList"] = {
		},
		["blackListKeyword"] = {
		},
		["whiteList"] = {
		},
		["replaceName"] = {
		},
		["replaceKeywordMsg"] = {
		},
	},
	["UpDataDate"] = 20191022,
}
debugDB = {
	["locale"] = {
		["单个字符类跟一个 '+'， 将匹配一或更多个该类的字符。 这个条目总是匹配尽可能长的串;\n"] = "单个字符类跟一个 '+'， 将匹配一或更多个该类的字符。 这个条目总是匹配尽可能长的串;\n",
		["调试统计"] = "调试统计",
		["正则表达式:\nLua的正则表达式是精简版,缺少部分功能,即便如此也足以满足我们的需要.\n|cffffff00字符类:|r 用于表示一个字符集合。\n"] = "正则表达式:\nLua的正则表达式是精简版,缺少部分功能,即便如此也足以满足我们的需要.\n|cffffff00字符类:|r 用于表示一个字符集合。\n",
		["|cffffff00%p|r : 表示所有标点符号。\n"] = "|cffffff00%p|r : 表示所有标点符号。\n",
		["|cffffff00.|r : (一个点)可表示任何字符。\n"] = "|cffffff00.|r : (一个点)可表示任何字符。\n",
		["Beta测试阶段,更新频繁.更新贴:NGA:搜索\"Tinom\".|cffffff00关键字默认支持正则表达式,若关键字中带有符号( ) . % + - * \\ ? [ ^ $,请在符号前加\"%\".如\"1-60\"写成\"1%-60\"|r"] = "Beta测试阶段,更新频繁.更新贴:NGA:搜索\"Tinom\".|cffffff00关键字默认支持正则表达式,若关键字中带有符号( ) . % + - * \\ ? [ ^ $,请在符号前加\"%\".如\"1-60\"写成\"1%-60\"|r",
		["单个字符类跟一个 '?'， 将匹配零或一个该类的字符。 只要有可能，它会匹配一个;\n"] = "单个字符类跟一个 '?'， 将匹配零或一个该类的字符。 只要有可能，它会匹配一个;\n",
		["|cffffff00%l|r : 表示所有小写字母。\n"] = "|cffffff00%l|r : 表示所有小写字母。\n",
		["|cffffff00捕获:|r\n模式可以在内部用小括号括起一个子模式； 这些子模式被称为 捕获物。 当匹配成功时，由 捕获物 匹配到的字符串中的子串被保存起来用于未来的用途。\n捕获物以它们左括号的次序来编号。 例如，对于模式 '(a*(.)%w(%s*))'，\n字符串中匹配到 'a*(.)%w(%s*)' 的部分保存在第一个捕获物中 (因此是编号 %1 )；\n由 '.' 匹配到的字符是 %2 号捕获物，\n匹配到 '%s*' 的那部分是 %3 号。 "] = "|cffffff00捕获:|r\n模式可以在内部用小括号括起一个子模式； 这些子模式被称为 捕获物。 当匹配成功时，由 捕获物 匹配到的字符串中的子串被保存起来用于未来的用途。\n捕获物以它们左括号的次序来编号。 例如，对于模式 '(a*(.)%w(%s*))'，\n字符串中匹配到 'a*(.)%w(%s*)' 的部分保存在第一个捕获物中 (因此是编号 %1 )；\n由 '.' 匹配到的字符是 %2 号捕获物，\n匹配到 '%s*' 的那部分是 %3 号。 ",
		["所有单个字母表示的类别(%a，%c，等)， 若将其字母改为大写，均表示对应的补集。\n    例如，%S 表示所有非空格的字符。"] = "所有单个字母表示的类别(%a，%c，等)， 若将其字母改为大写，均表示对应的补集。\n    例如，%S 表示所有非空格的字符。",
		["单个字符类跟一个 '*', 将匹配零或多个该类的字符。 这个条目总是匹配尽可能长的串;\n"] = "单个字符类跟一个 '*', 将匹配零或多个该类的字符。 这个条目总是匹配尽可能长的串;\n",
		["别名"] = "别名",
		["|cffffff00%s|r : 表示所有空白字符。\n"] = "|cffffff00%s|r : 表示所有空白字符。\n",
		["黑关键字"] = "黑关键字",
		["敏感关键字"] = "敏感关键字",
		["单个字符类跟一个 '-'， 将匹配零或更多个该类的字符。 和 '*' 不同， 这个条目总是匹配尽可能短的串;\n"] = "单个字符类跟一个 '-'， 将匹配零或更多个该类的字符。 和 '*' 不同， 这个条目总是匹配尽可能短的串;\n",
		["|cffffff00模式:|r指一个模式条目的序列。\n"] = "|cffffff00模式:|r指一个模式条目的序列。\n",
		["黑名单(自动)"] = "黑名单(自动)",
		["声音提醒"] = "声音提醒",
		["开启插件"] = "开启插件",
		["白关键字"] = "白关键字",
		["Home"] = "Home",
		["|cffffff00[set]|r: 表示 set 中所有字符的联合。\n    可以以 '-' 连接，升序书写范围两端的字符来表示一个范围的字符集。\n    上面提到的 %x 形式也可以在 set 中使用 表示其中的一个元素。\n    其它出现在 set 中的字符则代表它们自己。\n    例如，[%w_] （或 [_%w]） 表示所有的字母数字加下划线），\n    [0-7] 表示 8 进制数字，\n    [0-7%l%-]　表示 8 进制数字加小写字母与 '-' 字符。\n"] = "|cffffff00[set]|r: 表示 set 中所有字符的联合。\n    可以以 '-' 连接，升序书写范围两端的字符来表示一个范围的字符集。\n    上面提到的 %x 形式也可以在 set 中使用 表示其中的一个元素。\n    其它出现在 set 中的字符则代表它们自己。\n    例如，[%w_] （或 [_%w]） 表示所有的字母数字加下划线），\n    [0-7] 表示 8 进制数字，\n    [0-7%l%-]　表示 8 进制数字加小写字母与 '-' 字符。\n",
		["%bxy， 这里的 x 和 y 是两个明确的字符; 这个条目匹配以 x 开始 y 结束， 且其中 x 和 y 保持 平衡 的字符串。 意思是，如果从左到右读这个字符串，对每次读到一个 x 就 +1 ，读到一个 y 就 -1， 最终结束处的那个 y 是第一个记数到 0 的 y。 举个例子，条目 %b() 可以匹配到括号平衡的表达式。\n"] = "%bxy， 这里的 x 和 y 是两个明确的字符; 这个条目匹配以 x 开始 y 结束， 且其中 x 和 y 保持 平衡 的字符串。 意思是，如果从左到右读这个字符串，对每次读到一个 x 就 +1 ，读到一个 y 就 -1， 最终结束处的那个 y 是第一个记数到 0 的 y。 举个例子，条目 %b() 可以匹配到括号平衡的表达式。\n",
		["Hello Azeroth!"] = "Hello Azeroth!",
		["正则表达式教程"] = "正则表达式教程",
		["|cffffff00x|r : 表示字符 x 自身\n    (这里 x 不能是 魔法字符 ^ $ ( ) % . [ ] * + - ? 中的一员)。\n"] = "|cffffff00x|r : 表示字符 x 自身\n    (这里 x 不能是 魔法字符 ^ $ ( ) % . [ ] * + - ? 中的一员)。\n",
		["|cffffff00%w|r : 表示所有字母及数字。\n"] = "|cffffff00%w|r : 表示所有字母及数字。\n",
		["单个字符类匹配该类别中任意单个字符;\n"] = "单个字符类匹配该类别中任意单个字符;\n",
		["屏蔽此时间内的重复消息\n0为不限时间."] = "屏蔽此时间内的重复消息\n0为不限时间.",
		[""] = "",
		["TinomTest"] = "TinomTest",
		["敏感单"] = "敏感单",
		["|cffffff00%a|r : 表示任何字母。\n"] = "|cffffff00%a|r : 表示任何字母。\n",
		["|cffffff00%u|r : 表示所有大写字母。\n"] = "|cffffff00%u|r : 表示所有大写字母。\n",
		["|cffffff00[^set]|r: 表示 set 的补集， 其中 set 如上面的解释。\n"] = "|cffffff00[^set]|r: 表示 set 的补集， 其中 set 如上面的解释。\n",
		["|cffffff00模式条目:|r\n"] = "|cffffff00模式条目:|r\n",
		["%f[set]， 指 边境模式; 这个条目会匹配到一个位于 set 内某个字符之前的一个空串， 且这个位置的前一个字符不属于 set 。 集合 set 的含义如前面所述。 匹配出的那个空串之开始和结束点的计算就看成该处有个字符 '\\0' 一样。\n"] = "%f[set]， 指 边境模式; 这个条目会匹配到一个位于 set 内某个字符之前的一个空串， 且这个位置的前一个字符不属于 set 。 集合 set 的含义如前面所述。 匹配出的那个空串之开始和结束点的计算就看成该处有个字符 '\\0' 一样。\n",
		["|cffffff00%x|r : 表示字符 x\n    (这里的 x 是任意非字母或数字的字符)。\n    这是对魔法字符转义的标准方法。\n     所有非字母或数字的字符(包括所有标点，也包括非魔法字符)\n    都可以用前置一个 '%' 放在模式串中表示自身。 \n"] = "|cffffff00%x|r : 表示字符 x\n    (这里的 x 是任意非字母或数字的字符)。\n    这是对魔法字符转义的标准方法。\n     所有非字母或数字的字符(包括所有标点，也包括非魔法字符)\n    都可以用前置一个 '%' 放在模式串中表示自身。 \n",
		["%n， 这里的 n 可以从 1 到 9; 这个条目匹配一个等于 n 号捕获物（后面有描述）的子串。\n"] = "%n， 这里的 n 可以从 1 到 9; 这个条目匹配一个等于 n 号捕获物（后面有描述）的子串。\n",
		["屏蔽此时间内的任何消息\n0为不限时间."] = "屏蔽此时间内的任何消息\n0为不限时间.",
		["在模式最前面加上符号 '^' 将锚定从字符串的开始处做匹配。\n在模式最后面加上符号 '$' 将使匹配过程锚定到字符串的结尾。\n如果 '^' 和 '$' 出现在其它位置，它们均没有特殊含义，只表示自身。\n"] = "在模式最前面加上符号 '^' 将锚定从字符串的开始处做匹配。\n在模式最后面加上符号 '$' 将使匹配过程锚定到字符串的结尾。\n如果 '^' 和 '$' 出现在其它位置，它们均没有特殊含义，只表示自身。\n",
		["|cffffff00%d|r : 表示任何数字。\n"] = "|cffffff00%d|r : 表示任何数字。\n",
	},
	["log"] = {
	},
	["error"] = {
	},
}
